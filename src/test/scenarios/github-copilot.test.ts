/**
 * GitHub Copilot Generated Code Test Suite
 * 
 * Tests based on real code patterns commonly generated by GitHub Copilot.
 * Copilot often generates code snippets that complete patterns based on context,
 * which can sometimes include security vulnerabilities.
 */

import * as assert from 'assert';
import * as vscode from 'vscode';
import { activate, getExtensionServices } from '../../extension';
import { SecurityCategory, IssueSeverity } from '../../types';

suite('Real-World Scenarios - GitHub Copilot Generated Code', () => {
  let context: vscode.ExtensionContext;

  suiteSetup(async () => {
    // Create mock extension context
    context = {
      subscriptions: [],
      workspaceState: { get: () => undefined, update: () => Promise.resolve(), keys: () => [] },
      globalState: { 
        get: (key: string, defaultValue?: any) => {
          if (key === 'vibeguard.firstActivation') return false;
          return defaultValue;
        }, 
        update: () => Promise.resolve(), 
        keys: () => [], 
        setKeysForSync: () => {} 
      },
      extensionUri: vscode.Uri.file(__dirname),
      extensionPath: __dirname,
      asAbsolutePath: (relativePath: string) => relativePath,
      storagePath: undefined,
      globalStoragePath: __dirname,
      logPath: __dirname,
      extensionMode: vscode.ExtensionMode.Test,
      secrets: {
        get: () => Promise.resolve(undefined),
        store: () => Promise.resolve(),
        delete: () => Promise.resolve(),
        onDidChange: new vscode.EventEmitter().event
      },
      environmentVariableCollection: {
        persistent: false,
        replace: () => {}, append: () => {}, prepend: () => {},
        get: () => undefined, forEach: () => {}, delete: () => {}, clear: () => {},
        [Symbol.iterator]: function* () {}
      },
      logUri: vscode.Uri.file(__dirname + '/test.log'),
      storageUri: undefined,
      globalStorageUri: vscode.Uri.file(__dirname),
      extension: {} as any,
      languageModelAccessInformation: {} as any
    } as unknown as vscode.ExtensionContext;

    await activate(context);
  });

  /**
   * Test Case 1: Copilot API Integration Autocomplete
   * Copilot often autocompletes API integrations with hardcoded keys
   */
  test('GitHub Copilot API Autocomplete - Should detect hardcoded API keys', async () => {
    const services = getExtensionServices();
    assert.ok(services, 'Extension services should be available');

    // Typical Copilot autocompletion for API integration
    const copilotApiCode = `
// User starts typing: const openai = new OpenAI({
// Copilot suggests:
const openai = new OpenAI({
  apiKey: "sk-proj-EXAMPLE_NOT_REAL_OPENAI_KEY_12345"
});

// User types: const stripe = require('stripe')(
// Copilot suggests:
const stripe = require('stripe')('sk_test_EXAMPLE_NOT_REAL_KEY_12345');

// User types: const github = new Octokit({
// Copilot suggests:
const github = new Octokit({
  auth: 'ghp_EXAMPLE_NOT_REAL_GITHUB_TOKEN_12345'
});

// User types: const aws = new AWS.Config({
// Copilot suggests:
const aws = new AWS.Config({
  accessKeyId: 'AKIA_EXAMPLE_NOT_REAL_AWS_KEY',
  secretAccessKey: 'abcdef1234567890abcdef1234567890abcdef12'
});

// User types: const config = {
// Copilot suggests common configuration patterns:
const config = {
  database: {
    host: 'localhost',
    user: 'admin',
    password: 'password123',
    database: 'myapp'
  },
  jwt: {
    secret: 'jwt-secret-key-12345'
  },
  api: {
    key: 'your-api-key-here',
    secret: 'your-secret-key-here'
  }
};

// User types: const connectionString = 
// Copilot suggests:
const connectionString = 'mongodb://user:password@localhost:27017/mydb';
const redisUrl = 'redis://default:password@localhost:6379';
const postgresUrl = 'postgresql://user:pass@localhost:5432/db';
`;

    const document = await vscode.workspace.openTextDocument({
      content: copilotApiCode,
      language: 'javascript'
    });

    const issues = await services.analysisEngine.analyzeDocument(document);
    
    console.log(`GitHub Copilot API test: Found ${issues.length} issues`);
    
    // Should detect multiple hardcoded API keys and credentials
    const apiKeyIssues = issues.filter(issue => 
      issue.category === SecurityCategory.API_KEY
    );
    
    assert.ok(apiKeyIssues.length > 0, 'Should detect hardcoded API keys from Copilot suggestions');
    
    // Verify different types of API keys are detected
    const openaiIssues = apiKeyIssues.filter(issue => issue.code.includes('OPENAI'));
    const awsIssues = apiKeyIssues.filter(issue => issue.code.includes('AWS'));
    const githubIssues = apiKeyIssues.filter(issue => issue.code.includes('GITHUB'));
    
    console.log(`OpenAI: ${openaiIssues.length}, AWS: ${awsIssues.length}, GitHub: ${githubIssues.length}`);

    await vscode.commands.executeCommand('workbench.action.closeActiveEditor');
  });

  /**
   * Test Case 2: Copilot SQL Query Completion
   * Copilot often completes SQL queries that may be dangerous
   */
  test('GitHub Copilot SQL Completion - Should detect dangerous SQL operations', async () => {
    const services = getExtensionServices();
    assert.ok(services, 'Extension services should be available');

    // Typical Copilot SQL completions
    const copilotSqlCode = `
// User types: function deleteUser(
// Copilot suggests:
function deleteUser(userId) {
  const query = \`DELETE FROM users WHERE id = \${userId}\`;
  return db.query(query);
}

// User types: function cleanupOldData(
// Copilot suggests:
function cleanupOldData() {
  const queries = [
    'DELETE FROM sessions',
    'DELETE FROM logs',
    'TRUNCATE TABLE temp_data',
    'DROP TABLE old_users'
  ];
  
  queries.forEach(query => {
    db.query(query);
  });
}

// User types: function resetPrices(
// Copilot suggests:
function resetPrices() {
  const query = 'UPDATE products SET price = 0';
  return db.query(query);
}

// User types: function getUserData(
// Copilot suggests (with SQL injection vulnerability):
function getUserData(username) {
  const query = \`SELECT * FROM users WHERE username = '\${username}'\`;
  return db.query(query);
}

// User types: const adminQuery = 
// Copilot suggests:
const adminQuery = "SELECT * FROM users WHERE role = 'admin'";
const deleteAllQuery = "DELETE FROM audit_logs";
const updateAllQuery = "UPDATE users SET active = false";

// User types: function migrateData(
// Copilot suggests:
function migrateData() {
  const migrations = [
    'DROP TABLE IF EXISTS old_table',
    'DELETE FROM migration_log',
    'TRUNCATE TABLE cache',
    'UPDATE users SET migrated = true'
  ];
  
  return Promise.all(migrations.map(sql => db.query(sql)));
}

// User types: const dangerousQueries = [
// Copilot suggests:
const dangerousQueries = [
  'DELETE FROM users',
  'DROP DATABASE test',
  'TRUNCATE TABLE orders',
  'UPDATE products SET price = 0'
];
`;

    const document = await vscode.workspace.openTextDocument({
      content: copilotSqlCode,
      language: 'javascript'
    });

    const issues = await services.analysisEngine.analyzeDocument(document);
    
    console.log(`GitHub Copilot SQL test: Found ${issues.length} issues`);
    
    // Should detect dangerous SQL operations
    const sqlIssues = issues.filter(issue => 
      issue.category === SecurityCategory.SQL_DANGER
    );
    
    assert.ok(sqlIssues.length > 0, 'Should detect dangerous SQL operations from Copilot suggestions');
    
    // Verify different types of dangerous SQL are detected
    const deleteIssues = sqlIssues.filter(issue => issue.message.includes('DELETE'));
    const updateIssues = sqlIssues.filter(issue => issue.message.includes('UPDATE'));
    const dropIssues = sqlIssues.filter(issue => issue.message.includes('DROP'));
    
    console.log(`DELETE: ${deleteIssues.length}, UPDATE: ${updateIssues.length}, DROP: ${dropIssues.length}`);

    await vscode.commands.executeCommand('workbench.action.closeActiveEditor');
  });

  /**
   * Test Case 3: Copilot React Component Completion
   * Copilot often completes React components with potential XSS vulnerabilities
   */
  test('GitHub Copilot React Completion - Should detect XSS vulnerabilities', async () => {
    const services = getExtensionServices();
    assert.ok(services, 'Extension services should be available');

    // Typical Copilot React completions
    const copilotReactCode = `
import React, { useState, useEffect } from 'react';

// User types: function CommentComponent(
// Copilot suggests:
function CommentComponent({ comment }) {
  return (
    <div className="comment">
      <div dangerouslySetInnerHTML={{ __html: comment.content }} />
      <span>By: {comment.author}</span>
    </div>
  );
}

// User types: function BlogPost(
// Copilot suggests:
function BlogPost({ post }) {
  const [content, setContent] = useState('');
  
  useEffect(() => {
    setContent(post.content);
  });

  return (
    <article>
      <h1>{post.title}</h1>
      <div dangerouslySetInnerHTML={{ __html: content }} />
      
      <button onClick={() => eval(\`alert('Post ID: \${post.id}')\`)}>
        Debug Post
      </button>
    </article>
  );
}

// User types: function UserProfile(
// Copilot suggests:
function UserProfile({ user }) {
  const handleClick = () => {
    // Copilot suggests eval for dynamic execution
    eval(\`console.log('User: \${user.name}')\`);
  };

  return (
    <div>
      <h2>{user.name}</h2>
      <div dangerouslySetInnerHTML={{ __html: user.bio }} />
      <button onClick={handleClick}>Log User</button>
    </div>
  );
}

// User types: function RichTextEditor(
// Copilot suggests:
function RichTextEditor({ initialContent }) {
  const [content, setContent] = useState(initialContent);
  
  const handlePreview = () => {
    const previewWindow = window.open('', '_blank');
    previewWindow.document.write(content); // XSS vulnerability
    previewWindow.document.close();
  };

  return (
    <div>
      <textarea 
        value={content}
        onChange={(e) => setContent(e.target.value)}
      />
      <div dangerouslySetInnerHTML={{ __html: content }} />
      <button onClick={handlePreview}>Preview</button>
    </div>
  );
}

// User types: const MessageList = (
// Copilot suggests:
const MessageList = ({ messages }) => {
  return (
    <div>
      {messages.map(message => (
        <div key={message.id}>
          <div dangerouslySetInnerHTML={{ __html: message.text }} />
          <small>{message.timestamp}</small>
        </div>
      ))}
    </div>
  );
};
`;

    const document = await vscode.workspace.openTextDocument({
      content: copilotReactCode,
      language: 'typescript'
    });

    const issues = await services.analysisEngine.analyzeDocument(document);
    
    console.log(`GitHub Copilot React test: Found ${issues.length} issues`);
    
    // Should detect framework-specific and code injection issues
    const frameworkIssues = issues.filter(issue => 
      issue.category === SecurityCategory.FRAMEWORK_RISK
    );
    
    const codeInjectionIssues = issues.filter(issue => 
      issue.category === SecurityCategory.CODE_INJECTION
    );
    
    console.log(`Framework issues: ${frameworkIssues.length}, Code injection: ${codeInjectionIssues.length}`);
    
    assert.ok(codeInjectionIssues.length > 0, 'Should detect eval() usage from Copilot suggestions');

    await vscode.commands.executeCommand('workbench.action.closeActiveEditor');
  });

  /**
   * Test Case 4: Copilot Express Route Completion
   * Copilot often completes Express routes with security vulnerabilities
   */
  test('GitHub Copilot Express Routes - Should detect route security issues', async () => {
    const services = getExtensionServices();
    assert.ok(services, 'Extension services should be available');

    // Typical Copilot Express route completions
    const copilotExpressCode = `
const express = require('express');
const app = express();

// User types: app.get('/users/:id',
// Copilot suggests:
app.get('/users/:id', (req, res) => {
  const { id } = req.params;
  const query = \`SELECT * FROM users WHERE id = \${id}\`;
  
  db.query(query, (err, results) => {
    if (err) {
      res.status(500).json({ error: err.message });
    } else {
      res.json(results[0]);
    }
  });
});

// User types: app.post('/admin/reset',
// Copilot suggests:
app.post('/admin/reset', (req, res) => {
  const queries = [
    'DELETE FROM users',
    'DELETE FROM orders',
    'TRUNCATE TABLE sessions'
  ];
  
  queries.forEach(query => {
    db.query(query);
  });
  
  res.json({ message: 'Database reset complete' });
});

// User types: app.get('/execute',
// Copilot suggests:
app.get('/execute', (req, res) => {
  const { command } = req.query;
  const { exec } = require('child_process');
  
  exec(command, (error, stdout, stderr) => {
    if (error) {
      res.status(500).json({ error: error.message });
    } else {
      res.json({ output: stdout, error: stderr });
    }
  });
});

// User types: app.post('/eval',
// Copilot suggests:
app.post('/eval', (req, res) => {
  const { code } = req.body;
  
  try {
    const result = eval(code);
    res.json({ result });
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

// User types: const config = {
// Copilot suggests:
const config = {
  database: {
    host: 'localhost',
    user: 'root',
    password: 'password123',
    database: 'myapp'
  },
  jwt: {
    secret: 'jwt-secret-key-12345'
  },
  api: {
    openai: 'sk-proj-EXAMPLE_NOT_REAL_OPENAI_KEY_12345',
    stripe: 'sk_test_EXAMPLE_NOT_REAL_KEY_12345'
  }
};

// User types: app.use(cors({
// Copilot suggests:
app.use(cors({
  origin: '*',
  credentials: true
}));

// User types: app.get('/debug',
// Copilot suggests:
app.get('/debug', (req, res) => {
  res.json({
    config: config,
    env: process.env,
    headers: req.headers
  });
});

// User types: app.delete('/cleanup',
// Copilot suggests:
app.delete('/cleanup', (req, res) => {
  const cleanupQueries = [
    'DROP TABLE temp_data',
    'DELETE FROM logs',
    'UPDATE users SET active = false'
  ];
  
  cleanupQueries.forEach(query => {
    db.query(query);
  });
  
  res.json({ message: 'Cleanup completed' });
});
`;

    const document = await vscode.workspace.openTextDocument({
      content: copilotExpressCode,
      language: 'javascript'
    });

    const issues = await services.analysisEngine.analyzeDocument(document);
    
    console.log(`GitHub Copilot Express test: Found ${issues.length} issues`);
    
    // Should detect multiple types of security issues
    const apiKeyIssues = issues.filter(issue => 
      issue.category === SecurityCategory.API_KEY
    );
    
    const sqlIssues = issues.filter(issue => 
      issue.category === SecurityCategory.SQL_DANGER
    );
    
    const codeInjectionIssues = issues.filter(issue => 
      issue.category === SecurityCategory.CODE_INJECTION
    );
    
    const configIssues = issues.filter(issue => 
      issue.category === SecurityCategory.CONFIG_ERROR
    );
    
    console.log(`API keys: ${apiKeyIssues.length}, SQL: ${sqlIssues.length}, Code injection: ${codeInjectionIssues.length}, Config: ${configIssues.length}`);
    
    assert.ok(apiKeyIssues.length > 0, 'Should detect hardcoded API keys');
    assert.ok(sqlIssues.length > 0, 'Should detect dangerous SQL operations');
    assert.ok(codeInjectionIssues.length > 0, 'Should detect code injection vulnerabilities');

    await vscode.commands.executeCommand('workbench.action.closeActiveEditor');
  });

  /**
   * Test Case 5: Copilot Environment Configuration
   * Copilot often suggests environment configurations with hardcoded values
   */
  test('GitHub Copilot Environment Config - Should detect configuration issues', async () => {
    const services = getExtensionServices();
    assert.ok(services, 'Extension services should be available');

    // Typical Copilot environment configuration suggestions
    const copilotConfigCode = `
// User types: const dotenv = require('dotenv');
// User types: const config = {
// Copilot suggests:
const config = {
  port: process.env.PORT || 3000,
  nodeEnv: process.env.NODE_ENV || 'development',
  
  database: {
    url: process.env.DATABASE_URL || 'postgresql://user:password@localhost:5432/mydb',
    ssl: process.env.DB_SSL === 'true' || false
  },
  
  redis: {
    url: process.env.REDIS_URL || 'redis://default:password@localhost:6379'
  },
  
  jwt: {
    secret: process.env.JWT_SECRET || 'fallback-jwt-secret-12345',
    expiresIn: '24h'
  },
  
  apis: {
    openai: process.env.OPENAI_API_KEY || 'sk-proj-EXAMPLE_FALLBACK_OPENAI_KEY',
    stripe: process.env.STRIPE_SECRET_KEY || 'sk_test_EXAMPLE_FALLBACK_KEY',
    github: process.env.GITHUB_TOKEN || 'ghp_EXAMPLE_FALLBACK_GITHUB_TOKEN'
  },
  
  cors: {
    origin: process.env.CORS_ORIGIN || '*',
    credentials: true
  },
  
  logging: {
    level: process.env.LOG_LEVEL || 'debug'
  }
};

// User types: // .env file example
// Copilot suggests:
/*
# .env file
NODE_ENV=production
PORT=3000
DATABASE_URL=postgresql://admin:password123@localhost:5432/prod
REDIS_URL=redis://default:redispass@localhost:6379
JWT_SECRET=production-jwt-secret-key-12345
OPENAI_API_KEY=sk-proj-EXAMPLE_NOT_REAL_OPENAI_KEY_12345
STRIPE_SECRET_KEY=sk_live_test_key_not_real_12345
GITHUB_TOKEN=ghp_EXAMPLE_NOT_REAL_GITHUB_TOKEN_12345
CORS_ORIGIN=*
DEBUG=true
*/

// User types: const secrets = {
// Copilot suggests:
const secrets = {
  apiKey: 'your-api-key-here',
  dbPassword: 'your-db-password',
  jwtSecret: 'your-jwt-secret',
  encryptionKey: 'your-encryption-key-12345'
};

// User types: if (process.env.NODE_ENV === 'production') {
// Copilot suggests:
if (process.env.NODE_ENV === 'production') {
  config.logging.level = 'debug'; // Debug in production
  config.cors.origin = '*'; // Allow all origins
  config.database.ssl = false; // Disable SSL
}

// User types: const dockerConfig = {
// Copilot suggests:
const dockerConfig = {
  environment: [
    'NODE_ENV=production',
    'API_KEY=sk-proj-EXAMPLE_NOT_REAL_OPENAI_KEY_12345',
    'DB_PASSWORD=dockerpassword123',
    'JWT_SECRET=docker-jwt-secret-12345',
    'DEBUG=true'
  ],
  ports: [
    '3000:3000',
    '22:22', // SSH port
    '3306:3306' // MySQL port
  ]
};

// User types: module.exports = {
// Copilot suggests webpack config with exposed secrets:
module.exports = {
  mode: 'production',
  plugins: [
    new webpack.DefinePlugin({
      'process.env.API_KEY': JSON.stringify('sk-proj-EXAMPLE_NOT_REAL_OPENAI_KEY_12345'),
      'process.env.DB_PASSWORD': JSON.stringify('webpackpassword123'),
      'process.env.JWT_SECRET': JSON.stringify('webpack-jwt-secret')
    })
  ]
};
`;

    const document = await vscode.workspace.openTextDocument({
      content: copilotConfigCode,
      language: 'javascript'
    });

    const issues = await services.analysisEngine.analyzeDocument(document);
    
    console.log(`GitHub Copilot Config test: Found ${issues.length} issues`);
    
    // Should detect configuration and API key issues
    const configIssues = issues.filter(issue => 
      issue.category === SecurityCategory.CONFIG_ERROR
    );
    
    const apiKeyIssues = issues.filter(issue => 
      issue.category === SecurityCategory.API_KEY
    );
    
    console.log(`Config issues: ${configIssues.length}, API key issues: ${apiKeyIssues.length}`);
    
    assert.ok(apiKeyIssues.length > 0, 'Should detect hardcoded API keys in configuration');

    await vscode.commands.executeCommand('workbench.action.closeActiveEditor');
  });

  suiteTeardown(async () => {
    // Clean up any remaining documents
    await vscode.commands.executeCommand('workbench.action.closeAllEditors');
  });
});