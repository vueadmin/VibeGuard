/**
 * VibeGuard VSCode Extension Entry Point
 * 
 * This extension helps protect non-technical users from security risks
 * when using AI tools to generate code. It provides real-time detection
 * of dangerous patterns like hardcoded API keys, SQL injection risks,
 * and other security vulnerabilities.
 * 
 * Core workflow:
 * 1. DocumentMonitor listens for file changes
 * 2. AnalysisEngine coordinates rule execution
 * 3. RuleEngine executes detection rules
 * 4. DiagnosticManager displays issues in VSCode
 * 5. QuickFixProvider offers one-click fixes
 */

import * as vscode from 'vscode';
import { 
  COMMANDS, 
  SUCCESS_MESSAGES, 
  ERROR_MESSAGES,
  DIAGNOSTIC_COLLECTION_NAME 
} from './constants';
import { 
  getExtensionConfig, 
  logInfo, 
  logError, 
  showInfoMessage, 
  showErrorMessage 
} from './utils';
import { 
  VibeGuardConfig, 
  IDocumentMonitor, 
  IAnalysisEngine, 
  IRuleEngine,
  IDiagnosticManager,
  IQuickFixProvider 
} from './types';

// Import core components
import { DocumentMonitor } from './monitor/DocumentMonitor';
import { AnalysisEngine } from './analyzer/AnalysisEngine';
import { RuleEngine } from './rules/RuleEngine';
import { DiagnosticManager } from './diagnostics/DiagnosticManager';
import { QuickFixProvider } from './quickfix/QuickFixProvider';

// Import rule definitions
import { registerApiKeyRules } from './rules/definitions/api-keys';
import { registerSqlDangerRules } from './rules/definitions/sql-rules';
import { registerCodeInjectionRules } from './rules/definitions/code-injection-rules';
import { registerFrameworkRiskRules } from './rules/definitions/framework-rules';
import { registerConfigErrorRules } from './rules/definitions/config-rules';

/**
 * Extension context and services
 */
interface ExtensionServices {
  config: VibeGuardConfig;
  diagnosticCollection: vscode.DiagnosticCollection;
  documentMonitor: IDocumentMonitor;
  analysisEngine: IAnalysisEngine;
  ruleEngine: IRuleEngine;
  diagnosticManager: IDiagnosticManager;
  quickFixProvider: IQuickFixProvider;
}

let services: ExtensionServices | null = null;

/**
 * Extension activation function
 * Called when the extension is activated
 * 
 * Initialization sequence:
 * 1. Initialize Rule Engine and register detection rules
 * 2. Initialize Analysis Engine and connect to Rule Engine
 * 3. Initialize Diagnostic Manager for VSCode integration
 * 4. Initialize Quick Fix Provider for one-click fixes
 * 5. Initialize Document Monitor for real-time analysis
 * 6. Register VSCode providers and commands
 * 7. Start real-time monitoring workflow
 */
export async function activate(context: vscode.ExtensionContext): Promise<void> {
  try {
    // Prevent duplicate activation
    if (services) {
      logInfo('VibeGuard Êâ©Â±ïÂ∑≤ÁªèÊøÄÊ¥ª');
      return;
    }
    
    logInfo('Ê≠£Âú®ÊøÄÊ¥ª VibeGuard Êâ©Â±ï...');

    // Initialize configuration
    const config = getExtensionConfig();
    logInfo(`ÈÖçÁΩÆÂä†ËΩΩÂÆåÊàê - ÂÆûÊó∂ÂàÜÊûê: ${config.enableRealTimeAnalysis}, Èò≤ÊäñÂª∂Ëøü: ${config.debounceDelay}ms`);

    // Initialize core services in proper order
    logInfo('Ê≠£Âú®ÂàùÂßãÂåñÊ†∏ÂøÉÊúçÂä°...');
    
    // 1. Initialize Rule Engine first (foundation for all analysis)
    const ruleEngine = new RuleEngine();
    logInfo('ËßÑÂàôÂºïÊìéÂàùÂßãÂåñÂÆåÊàê');
    
    // 2. Initialize Analysis Engine and connect to Rule Engine
    const analysisEngine = new AnalysisEngine();
    analysisEngine.setRuleEngine(ruleEngine);
    logInfo('ÂàÜÊûêÂºïÊìéÂàùÂßãÂåñÂÆåÊàêÂπ∂ËøûÊé•Âà∞ËßÑÂàôÂºïÊìé');
    
    // 3. Initialize Diagnostic Manager for VSCode integration
    const diagnosticManager = new DiagnosticManager({
      collectionName: DIAGNOSTIC_COLLECTION_NAME,
      maxDiagnosticsPerFile: 50,
      groupSimilarIssues: true
    });
    
    // Get diagnostic collection from manager and register it with VSCode
    const diagnosticCollection = diagnosticManager.getDiagnosticCollection();
    context.subscriptions.push(diagnosticCollection);
    logInfo('ËØäÊñ≠ÁÆ°ÁêÜÂô®ÂàùÂßãÂåñÂÆåÊàêÂπ∂Ê≥®ÂÜåÂà∞ VSCode');
    
    // 4. Initialize Quick Fix Provider for one-click fixes
    const quickFixProvider = new QuickFixProvider(diagnosticCollection);
    logInfo('Âø´ÈÄü‰øÆÂ§çÊèê‰æõËÄÖÂàùÂßãÂåñÂÆåÊàê');
    
    // 5. Initialize Document Monitor with complete workflow
    const documentMonitor = new DocumentMonitor(analysisEngine, diagnosticManager);
    logInfo('ÊñáÊ°£ÁõëÊéßÂô®ÂàùÂßãÂåñÂÆåÊàê');

    // Initialize services object for global access
    services = {
      config,
      diagnosticCollection,
      documentMonitor,
      analysisEngine,
      ruleEngine,
      diagnosticManager,
      quickFixProvider
    };

    // Register all detection rules (API keys have highest priority)
    await registerDetectionRules(ruleEngine);

    // Verify all components are properly integrated
    verifyComponentIntegration();

    // Register VSCode providers and commands
    registerVSCodeProviders(context, quickFixProvider);
    registerCommands(context);
    registerConfigurationChangeListener(context);

    // Start real-time monitoring workflow
    if (config.enableRealTimeAnalysis) {
      documentMonitor.startMonitoring();
      logInfo('ÂÆûÊó∂ÊñáÊ°£ÁõëÊéßÂ∑≤ÂêØÂä® - ÂºÄÂßã‰øùÊä§‰ª£Á†ÅÂÆâÂÖ®');
    } else {
      logInfo('ÂÆûÊó∂ÂàÜÊûêÂ∑≤Á¶ÅÁî® - ÂèØÈÄöËøáÂëΩ‰ª§ÊâãÂä®ÂàÜÊûê');
    }

    // Show activation success
    logInfo(SUCCESS_MESSAGES.EXTENSION_ACTIVATED);
    
    // Show user-friendly activation message (only on first activation)
    const isFirstActivation = context.globalState.get('vibeguard.firstActivation', true);
    if (isFirstActivation) {
      showInfoMessage('VibeGuard Â∑≤ÊøÄÊ¥ªÔºÅÊ≠£Âú®‰øùÊä§ÊÇ®ÁöÑ‰ª£Á†ÅÂÆâÂÖ® üõ°Ô∏è');
      await context.globalState.update('vibeguard.firstActivation', false);
    }

    // Log final activation summary
    const ruleStats = ruleEngine.getStatistics();
    logInfo(`VibeGuard Êâ©Â±ïÊøÄÊ¥ªÂÆåÊàê - Â∑≤Ê≥®ÂÜå ${ruleStats.enabledRules} ‰∏™Ê£ÄÊµãËßÑÂàô (ÊÄªËÆ° ${ruleStats.totalRules} ‰∏™)`);
    logInfo(`ËßÑÂàôÂàÜÂ∏É: ${Object.entries(ruleStats.rulesByCategory).map(([cat, count]) => `${cat}: ${count}`).join(', ')}`);

  } catch (error) {
    logError(error as Error, 'Êâ©Â±ïÊøÄÊ¥ªÂ§±Ë¥•');
    showErrorMessage(ERROR_MESSAGES.EXTENSION_ACTIVATION_FAILED);
    throw error;
  }
}

/**
 * Extension deactivation function
 * Called when the extension is deactivated
 * Ensures proper cleanup of all services and resources
 */
export function deactivate(): void {
  try {
    logInfo('Ê≠£Âú®ÂÅúÁî® VibeGuard Êâ©Â±ï...');
    
    // Clean up services in reverse order of initialization
    if (services) {
      // 1. Stop document monitoring first
      if (services.documentMonitor) {
        logInfo('ÂÅúÊ≠¢ÊñáÊ°£ÁõëÊéß...');
        services.documentMonitor.stopMonitoring();
        services.documentMonitor.dispose();
      }
      
      // 2. Clear diagnostics (clear all by clearing each document)
      if (services.diagnosticManager) {
        logInfo('Ê∏ÖÁêÜËØäÊñ≠‰ø°ÊÅØ...');
        // Clear diagnostics for all open documents
        vscode.workspace.textDocuments.forEach(doc => {
          services!.diagnosticManager.clearDiagnostics(doc);
        });
        services.diagnosticManager.dispose();
      }
      
      // 3. Dispose diagnostic collection
      if (services.diagnosticCollection) {
        services.diagnosticCollection.dispose();
      }
      
      // 4. Dispose analysis engine
      if (services.analysisEngine) {
        logInfo('Ê∏ÖÁêÜÂàÜÊûêÂºïÊìé...');
        services.analysisEngine.dispose();
      }
      
      // 5. Clear rule engine (no explicit dispose method, but log for completeness)
      if (services.ruleEngine) {
        const stats = services.ruleEngine.getStatistics();
        logInfo(`ËßÑÂàôÂºïÊìéÊ∏ÖÁêÜÂÆåÊàê - Â∑≤Ê∏ÖÁêÜ ${stats.totalRules} ‰∏™ËßÑÂàô`);
      }
      
      // 6. Clear services reference
      services = null;
    }
    
    logInfo('VibeGuard Êâ©Â±ïÂ∑≤ÂÆåÂÖ®ÂÅúÁî® - ÊâÄÊúâËµÑÊ∫êÂ∑≤Ê∏ÖÁêÜ');
  } catch (error) {
    logError(error as Error, 'Êâ©Â±ïÂÅúÁî®Êó∂ÂèëÁîüÈîôËØØ');
  }
}

/**
 * Register extension commands for manual analysis and control
 */
function registerCommands(context: vscode.ExtensionContext): void {
  try {
    // Analyze current file command - triggers the complete analysis workflow
    const analyzeCurrentFileCommand = vscode.commands.registerCommand(
      COMMANDS.ANALYZE_CURRENT_FILE,
      async () => {
      try {
        const activeEditor = vscode.window.activeTextEditor;
        if (!activeEditor) {
          showInfoMessage('ËØ∑ÂÖàÊâìÂºÄ‰∏Ä‰∏™Êñá‰ª∂');
          return;
        }

        if (!services?.analysisEngine || !services?.diagnosticManager) {
          showErrorMessage('ÂàÜÊûêÊúçÂä°Êú™ÂàùÂßãÂåñ');
          return;
        }

        showInfoMessage('Ê≠£Âú®ÂàÜÊûêÂΩìÂâçÊñá‰ª∂...');
        logInfo(`ÊâãÂä®ÂàÜÊûêÂºÄÂßã: ${activeEditor.document.fileName}`);
        
        // Perform complete analysis using the integrated workflow
        const issues = await services.analysisEngine.analyzeDocument(activeEditor.document);
        
        // Update diagnostics through the diagnostic manager
        services.diagnosticManager.updateDiagnostics(activeEditor.document, issues);
        
        // Show user-friendly results
        const message = issues.length > 0 
          ? `ÂèëÁé∞ ${issues.length} ‰∏™ÂÆâÂÖ®ÈóÆÈ¢ò - ËØ∑Êü•ÁúãÁºñËæëÂô®‰∏≠ÁöÑÁ∫¢Ëâ≤Ê≥¢Êµ™Á∫ø` 
          : 'Êú™ÂèëÁé∞ÂÆâÂÖ®ÈóÆÈ¢ò ‚úÖ ‰ª£Á†ÅÁúãËµ∑Êù•ÂæàÂÆâÂÖ®ÔºÅ';
        showInfoMessage(message);
        
        // Log detailed results for debugging
        if (issues.length > 0) {
          const issuesByCategory = issues.reduce((acc, issue) => {
            acc[issue.category] = (acc[issue.category] || 0) + 1;
            return acc;
          }, {} as Record<string, number>);
          
          logInfo(`ÂàÜÊûêÂÆåÊàê: ${activeEditor.document.fileName} - ${issues.length} ‰∏™ÈóÆÈ¢ò`);
          logInfo(`ÈóÆÈ¢òÂàÜÂ∏É: ${Object.entries(issuesByCategory).map(([cat, count]) => `${cat}: ${count}`).join(', ')}`);
        } else {
          logInfo(`ÂàÜÊûêÂÆåÊàê: ${activeEditor.document.fileName} - Êó†ÂÆâÂÖ®ÈóÆÈ¢ò`);
        }
        
      } catch (error) {
        logError(error as Error, 'ÂàÜÊûêÂΩìÂâçÊñá‰ª∂Â§±Ë¥•');
        showErrorMessage('ÂàÜÊûêÊñá‰ª∂Êó∂ÂèëÁîüÈîôËØØÔºåËØ∑Êü•ÁúãÂºÄÂèëËÄÖÊéßÂà∂Âè∞‰∫ÜËß£ËØ¶ÊÉÖ');
      }
    }
  );

  // Analyze workspace command - analyzes all open documents
  const analyzeWorkspaceCommand = vscode.commands.registerCommand(
    COMMANDS.ANALYZE_WORKSPACE,
    async () => {
      try {
        if (!vscode.workspace.workspaceFolders) {
          showInfoMessage('ËØ∑ÂÖàÊâìÂºÄ‰∏Ä‰∏™Â∑•‰ΩúÂå∫');
          return;
        }

        if (!services?.analysisEngine || !services?.diagnosticManager) {
          showErrorMessage('ÂàÜÊûêÊúçÂä°Êú™ÂàùÂßãÂåñ');
          return;
        }

        showInfoMessage('Ê≠£Âú®ÂàÜÊûêÂ∑•‰ΩúÂå∫Êñá‰ª∂...');
        logInfo('Â∑•‰ΩúÂå∫ÊâπÈáèÂàÜÊûêÂºÄÂßã');
        
        // Get all open text documents
        const documents = vscode.workspace.textDocuments;
        let totalIssues = 0;
        let analyzedFiles = 0;
        const issuesByCategory: Record<string, number> = {};
        
        // Analyze each document using the integrated workflow
        for (const document of documents) {
          if (!document.isUntitled) {
            try {
              logInfo(`ÂàÜÊûêÊñá‰ª∂: ${document.fileName}`);
              const issues = await services.analysisEngine.analyzeDocument(document);
              
              // Update diagnostics for each file
              services.diagnosticManager.updateDiagnostics(document, issues);
              
              // Collect statistics
              totalIssues += issues.length;
              analyzedFiles++;
              
              // Track issues by category
              issues.forEach(issue => {
                issuesByCategory[issue.category] = (issuesByCategory[issue.category] || 0) + 1;
              });
              
            } catch (error) {
              logError(error as Error, `ÂàÜÊûêÊñá‰ª∂Â§±Ë¥•: ${document.fileName}`);
            }
          }
        }
        
        // Show comprehensive results
        const message = totalIssues > 0
          ? `Â∑•‰ΩúÂå∫ÂàÜÊûêÂÆåÊàêÔºöÂàÜÊûê‰∫Ü ${analyzedFiles} ‰∏™Êñá‰ª∂ÔºåÂèëÁé∞ ${totalIssues} ‰∏™ÂÆâÂÖ®ÈóÆÈ¢ò`
          : `Â∑•‰ΩúÂå∫ÂàÜÊûêÂÆåÊàêÔºöÂàÜÊûê‰∫Ü ${analyzedFiles} ‰∏™Êñá‰ª∂ÔºåÊú™ÂèëÁé∞ÂÆâÂÖ®ÈóÆÈ¢ò ‚úÖ`;
        
        showInfoMessage(message);
        
        // Log detailed statistics
        logInfo(`Â∑•‰ΩúÂå∫ÂàÜÊûêÂÆåÊàê - Êñá‰ª∂: ${analyzedFiles}, ÈóÆÈ¢ò: ${totalIssues}`);
        if (Object.keys(issuesByCategory).length > 0) {
          logInfo(`ÈóÆÈ¢òÂàÜÂ∏É: ${Object.entries(issuesByCategory).map(([cat, count]) => `${cat}: ${count}`).join(', ')}`);
        }
        
      } catch (error) {
        logError(error as Error, 'ÂàÜÊûêÂ∑•‰ΩúÂå∫Â§±Ë¥•');
        showErrorMessage('ÂàÜÊûêÂ∑•‰ΩúÂå∫Êó∂ÂèëÁîüÈîôËØØÔºåËØ∑Êü•ÁúãÂºÄÂèëËÄÖÊéßÂà∂Âè∞‰∫ÜËß£ËØ¶ÊÉÖ');
      }
    }
  );

  // Fix all issues command - applies all available quick fixes
  const fixAllIssuesCommand = vscode.commands.registerCommand(
    'vibeguard.fixAllIssues',
    async () => {
      try {
        const activeEditor = vscode.window.activeTextEditor;
        if (!activeEditor) {
          showInfoMessage('ËØ∑ÂÖàÊâìÂºÄ‰∏Ä‰∏™Êñá‰ª∂');
          return;
        }

        if (!services?.diagnosticCollection || !services?.quickFixProvider) {
          showErrorMessage('‰øÆÂ§çÊúçÂä°Êú™ÂàùÂßãÂåñ');
          return;
        }

        // Get all diagnostics for the current document
        const diagnostics = services.diagnosticCollection.get(activeEditor.document.uri);
        if (!diagnostics || diagnostics.length === 0) {
          showInfoMessage('ÂΩìÂâçÊñá‰ª∂Ê≤°ÊúâÂèëÁé∞ÂÆâÂÖ®ÈóÆÈ¢ò ‚úÖ');
          return;
        }

        const vibeguardDiagnostics = diagnostics.filter(d => d.source === 'VibeGuard');
        if (vibeguardDiagnostics.length === 0) {
          showInfoMessage('ÂΩìÂâçÊñá‰ª∂Ê≤°Êúâ VibeGuard Ê£ÄÊµãÂà∞ÁöÑÈóÆÈ¢ò');
          return;
        }

        // Show confirmation dialog
        const choice = await vscode.window.showWarningMessage(
          `ÂèëÁé∞ ${vibeguardDiagnostics.length} ‰∏™ÂÆâÂÖ®ÈóÆÈ¢òÔºåÊòØÂê¶‰∏ÄÈîÆ‰øÆÂ§çÔºü`,
          { modal: true },
          'üöÄ Á´ãÂç≥‰øÆÂ§ç',
          'üìã Êü•ÁúãËØ¶ÊÉÖ',
          '‚ùå ÂèñÊ∂à'
        );

        if (choice === 'üöÄ Á´ãÂç≥‰øÆÂ§ç') {
          showInfoMessage('Ê≠£Âú®‰øÆÂ§çÊâÄÊúâÂÆâÂÖ®ÈóÆÈ¢ò...');
          
          // Create a context for code actions
          const context: vscode.CodeActionContext = {
            diagnostics: vibeguardDiagnostics,
            only: [vscode.CodeActionKind.SourceFixAll],
            triggerKind: vscode.CodeActionTriggerKind.Invoke
          };

          // Get fix all action
          const actions = await services.quickFixProvider.provideCodeActions(
            activeEditor.document,
            new vscode.Range(0, 0, activeEditor.document.lineCount, 0),
            context,
            new vscode.CancellationTokenSource().token
          );

          const fixAllAction = actions?.find(action => 
            action.kind?.contains(vscode.CodeActionKind.SourceFixAll)
          );

          if (fixAllAction && fixAllAction.edit) {
            await vscode.workspace.applyEdit(fixAllAction.edit);
            showInfoMessage(`‚úÖ ÊàêÂäü‰øÆÂ§ç ${vibeguardDiagnostics.length} ‰∏™ÂÆâÂÖ®ÈóÆÈ¢òÔºÅ`);
            logInfo(`ÊâπÈáè‰øÆÂ§çÂÆåÊàê - ‰øÆÂ§ç‰∫Ü ${vibeguardDiagnostics.length} ‰∏™ÈóÆÈ¢ò`);
          } else {
            showInfoMessage('ÈÉ®ÂàÜÈóÆÈ¢òÈúÄË¶ÅÊâãÂä®‰øÆÂ§çÔºåËØ∑ÁÇπÂáª‰ª£Á†Å‰∏≠ÁöÑÁÅØÊ≥°ÂõæÊ†á');
          }
        } else if (choice === 'üìã Êü•ÁúãËØ¶ÊÉÖ') {
          // Show problems panel
          vscode.commands.executeCommand('workbench.panel.markers.view.focus');
        }

      } catch (error) {
        logError(error as Error, 'ÊâπÈáè‰øÆÂ§çÂ§±Ë¥•');
        showErrorMessage('‰øÆÂ§çËøáÁ®ã‰∏≠ÂèëÁîüÈîôËØØÔºåËØ∑ÊâãÂä®‰øÆÂ§çÊàñÊü•ÁúãÂºÄÂèëËÄÖÊéßÂà∂Âè∞');
      }
    }
  );

  // Show security report command
  const showSecurityReportCommand = vscode.commands.registerCommand(
    'vibeguard.showSecurityReport',
    async () => {
      try {
        if (!services?.diagnosticCollection) {
          showErrorMessage('Êä•ÂëäÊúçÂä°Êú™ÂàùÂßãÂåñ');
          return;
        }

        // Collect all diagnostics from all documents
        let totalIssues = 0;
        const issuesByCategory: Record<string, number> = {};
        const issuesBySeverity: Record<string, number> = {};
        const fileStats: Array<{ file: string; issues: number }> = [];

        // Iterate through all documents with diagnostics
        services.diagnosticCollection.forEach((uri, diagnostics) => {
          const vibeguardDiagnostics = diagnostics.filter(d => d.source === 'VibeGuard');
          if (vibeguardDiagnostics.length > 0) {
            totalIssues += vibeguardDiagnostics.length;
            fileStats.push({
              file: vscode.workspace.asRelativePath(uri),
              issues: vibeguardDiagnostics.length
            });

            // Categorize issues
            vibeguardDiagnostics.forEach(diagnostic => {
              const code = diagnostic.code?.toString() || 'unknown';
              const category = code.split('_')[0];
              issuesByCategory[category] = (issuesByCategory[category] || 0) + 1;

              const severity = diagnostic.severity === vscode.DiagnosticSeverity.Error ? 'error' : 'warning';
              issuesBySeverity[severity] = (issuesBySeverity[severity] || 0) + 1;
            });
          }
        });

        // Generate report content
        const reportLines = [
          '# VibeGuard ÂÆâÂÖ®Ê£ÄÊµãÊä•Âëä üõ°Ô∏è',
          '',
          `**ÁîüÊàêÊó∂Èó¥**: ${new Date().toLocaleString('zh-CN')}`,
          '',
          '## üìä ÊÄª‰ΩìÁªüËÆ°',
          '',
          `- **ÊÄªÈóÆÈ¢òÊï∞**: ${totalIssues}`,
          `- **ÂèóÂΩ±ÂìçÊñá‰ª∂**: ${fileStats.length}`,
          `- **ÈîôËØØÁ∫ßÂà´**: ${issuesBySeverity.error || 0}`,
          `- **Ë≠¶ÂëäÁ∫ßÂà´**: ${issuesBySeverity.warning || 0}`,
          '',
          '## üè∑Ô∏è ÈóÆÈ¢òÂàÜÁ±ª',
          ''
        ];

        // Add category breakdown
        Object.entries(issuesByCategory).forEach(([category, count]) => {
          const categoryNames: Record<string, string> = {
            'API': 'üîë API ÂØÜÈí•ÂÆâÂÖ®',
            'SQL': 'üíæ SQL Âç±Èô©Êìç‰Ωú',
            'CODE': 'üíª ‰ª£Á†ÅÊ≥®ÂÖ•È£éÈô©',
            'FRAMEWORK': '‚öõÔ∏è Ê°ÜÊû∂ÁâπÂÆöÈ£éÈô©',
            'CONFIG': '‚öôÔ∏è ÈÖçÁΩÆÈîôËØØ'
          };
          const categoryName = categoryNames[category] || category;
          reportLines.push(`- **${categoryName}**: ${count} ‰∏™ÈóÆÈ¢ò`);
        });

        reportLines.push('', '## üìÅ Êñá‰ª∂ËØ¶ÊÉÖ', '');

        // Add file breakdown
        fileStats
          .sort((a, b) => b.issues - a.issues)
          .forEach(stat => {
            reportLines.push(`- \`${stat.file}\`: ${stat.issues} ‰∏™ÈóÆÈ¢ò`);
          });

        if (totalIssues === 0) {
          reportLines.push('', 'üéâ **ÊÅ≠ÂñúÔºÅÊ≤°ÊúâÂèëÁé∞ÂÆâÂÖ®ÈóÆÈ¢òÔºå‰ª£Á†ÅÂæàÂÆâÂÖ®ÔºÅ**');
        } else {
          reportLines.push(
            '',
            '## üöÄ Âª∫ËÆÆÊìç‰Ωú',
            '',
            '1. ÁÇπÂáª‰ª£Á†Å‰∏≠ÁöÑ üí° ÁÅØÊ≥°ÂõæÊ†áÊü•ÁúãÂÖ∑‰Ωì‰øÆÂ§çÂª∫ËÆÆ',
            '2. ‰ΩøÁî® `Ctrl+Shift+P` ‚Üí "VibeGuard: ‰∏ÄÈîÆ‰øÆÂ§çÊâÄÊúâÂÆâÂÖ®ÈóÆÈ¢ò"',
            '3. Êü•Áúã [ÂÆâÂÖ®ÊúÄ‰Ω≥ÂÆûË∑µ](https://vibeguard.dev/docs) ‰∫ÜËß£Êõ¥Â§ö',
            '',
            '---',
            '',
            'üí° **ÊèêÁ§∫**: ÂÆöÊúüËøêË°åÂÆâÂÖ®Ê£ÄÊµãÔºå‰øùÊä§‰ª£Á†ÅÂÖçÂèóÂÆâÂÖ®Â®ÅËÉÅÔºÅ'
          );
        }

        // Create and show report document
        const reportContent = reportLines.join('\n');
        const doc = await vscode.workspace.openTextDocument({
          content: reportContent,
          language: 'markdown'
        });

        await vscode.window.showTextDocument(doc, {
          preview: true,
          viewColumn: vscode.ViewColumn.Beside
        });

        logInfo(`ÂÆâÂÖ®Êä•ÂëäÂ∑≤ÁîüÊàê - ÊÄªÈóÆÈ¢ò: ${totalIssues}, Êñá‰ª∂: ${fileStats.length}`);

      } catch (error) {
        logError(error as Error, 'ÁîüÊàêÂÆâÂÖ®Êä•ÂëäÂ§±Ë¥•');
        showErrorMessage('ÁîüÊàêÊä•ÂëäÊó∂ÂèëÁîüÈîôËØØÔºåËØ∑Êü•ÁúãÂºÄÂèëËÄÖÊéßÂà∂Âè∞‰∫ÜËß£ËØ¶ÊÉÖ');
      }
    }
  );

  // Learn security command
  const learnSecurityCommand = vscode.commands.registerCommand(
    'vibeguard.learnSecurity',
    async () => {
      try {
        const choice = await vscode.window.showInformationMessage(
          'ÈÄâÊã©Â≠¶‰π†ÂÜÖÂÆπÔºö',
          'üìö Áî®Êà∑ÊåáÂçó',
          'üèÜ ÊúÄ‰Ω≥ÂÆûË∑µ',
          'üåê Âú®Á∫øÊñáÊ°£',
          'üí¨ Á§æÂå∫ËÆ®ËÆ∫'
        );

        switch (choice) {
          case 'üìö Áî®Êà∑ÊåáÂçó':
            // Open user guide
            const userGuideUri = vscode.Uri.joinPath(
              vscode.extensions.getExtension('vibeguard.vibeguard')?.extensionUri || vscode.Uri.file(''),
              'docs',
              'USER_GUIDE.md'
            );
            try {
              const doc = await vscode.workspace.openTextDocument(userGuideUri);
              await vscode.window.showTextDocument(doc);
            } catch {
              vscode.env.openExternal(vscode.Uri.parse('https://vibeguard.dev/docs/user-guide'));
            }
            break;

          case 'üèÜ ÊúÄ‰Ω≥ÂÆûË∑µ':
            // Open best practices
            const bestPracticesUri = vscode.Uri.joinPath(
              vscode.extensions.getExtension('vibeguard.vibeguard')?.extensionUri || vscode.Uri.file(''),
              'docs',
              'BEST_PRACTICES.md'
            );
            try {
              const doc = await vscode.workspace.openTextDocument(bestPracticesUri);
              await vscode.window.showTextDocument(doc);
            } catch {
              vscode.env.openExternal(vscode.Uri.parse('https://vibeguard.dev/docs/best-practices'));
            }
            break;

          case 'üåê Âú®Á∫øÊñáÊ°£':
            vscode.env.openExternal(vscode.Uri.parse('https://vibeguard.dev/docs'));
            break;

          case 'üí¨ Á§æÂå∫ËÆ®ËÆ∫':
            vscode.env.openExternal(vscode.Uri.parse('https://discord.gg/vibeguard'));
            break;
        }

      } catch (error) {
        logError(error as Error, 'ÊâìÂºÄÂ≠¶‰π†ËµÑÊ∫êÂ§±Ë¥•');
        showErrorMessage('ÊâìÂºÄÂ≠¶‰π†ËµÑÊ∫êÊó∂ÂèëÁîüÈîôËØØ');
      }
    }
  );

    // Register commands with context
    context.subscriptions.push(analyzeCurrentFileCommand);
    context.subscriptions.push(analyzeWorkspaceCommand);
    context.subscriptions.push(fixAllIssuesCommand);
    context.subscriptions.push(showSecurityReportCommand);
    context.subscriptions.push(learnSecurityCommand);

    logInfo('ÊâÄÊúâÂëΩ‰ª§Ê≥®ÂÜåÂÆåÊàê');
  } catch (error) {
    // Handle command registration errors (e.g., duplicate registration in tests)
    if (error instanceof Error && error.message.includes('already exists')) {
      logInfo('ÂëΩ‰ª§Â∑≤Â≠òÂú®ÔºåË∑≥ËøáÊ≥®ÂÜåÔºàÂèØËÉΩÂú®ÊµãËØïÁéØÂ¢É‰∏≠Ôºâ');
    } else {
      logError(error as Error, 'ÂëΩ‰ª§Ê≥®ÂÜåÂ§±Ë¥•');
      throw error;
    }
  }
}

/**
 * Register configuration change listener to update all services when settings change
 */
function registerConfigurationChangeListener(context: vscode.ExtensionContext): void {
  const configChangeListener = vscode.workspace.onDidChangeConfiguration(event => {
    if (event.affectsConfiguration('vibeguard')) {
      try {
        if (!services) {
          return;
        }

        // Update configuration
        const newConfig = getExtensionConfig();
        const oldConfig = services.config;
        services.config = newConfig;
        
        logInfo('ÈÖçÁΩÆÊõ¥Êñ∞Ê£ÄÊµãÂà∞');
        
        // Handle real-time analysis toggle
        if (oldConfig.enableRealTimeAnalysis !== newConfig.enableRealTimeAnalysis) {
          if (newConfig.enableRealTimeAnalysis) {
            services.documentMonitor.startMonitoring();
            logInfo('ÂÆûÊó∂ÂàÜÊûêÂ∑≤ÂêØÁî®');
            showInfoMessage('ÂÆûÊó∂‰ª£Á†ÅÂàÜÊûêÂ∑≤ÂêØÁî®');
          } else {
            services.documentMonitor.stopMonitoring();
            logInfo('ÂÆûÊó∂ÂàÜÊûêÂ∑≤Á¶ÅÁî®');
            showInfoMessage('ÂÆûÊó∂‰ª£Á†ÅÂàÜÊûêÂ∑≤Á¶ÅÁî®');
          }
        }
        
        // Handle debounce delay changes
        if (oldConfig.debounceDelay !== newConfig.debounceDelay) {
          // Restart monitoring to apply new debounce delay
          if (newConfig.enableRealTimeAnalysis) {
            services.documentMonitor.stopMonitoring();
            services.documentMonitor.startMonitoring();
          }
          logInfo(`Èò≤ÊäñÂª∂ËøüÂ∑≤Êõ¥Êñ∞: ${newConfig.debounceDelay}ms`);
        }
        
        // Handle supported languages changes
        if (JSON.stringify(oldConfig.supportedLanguages) !== JSON.stringify(newConfig.supportedLanguages)) {
          logInfo(`ÊîØÊåÅÁöÑËØ≠Ë®ÄÂ∑≤Êõ¥Êñ∞: ${newConfig.supportedLanguages.join(', ')}`);
        }
        
        // Handle file size limit changes
        if (oldConfig.maxFileSize !== newConfig.maxFileSize) {
          logInfo(`Êñá‰ª∂Â§ßÂ∞èÈôêÂà∂Â∑≤Êõ¥Êñ∞: ${newConfig.maxFileSize} Â≠óËäÇ`);
        }
        
        logInfo('ÊâÄÊúâÊúçÂä°ÈÖçÁΩÆÂ∑≤ÂêåÊ≠•Êõ¥Êñ∞');
        
      } catch (error) {
        logError(error as Error, 'Êõ¥Êñ∞ÈÖçÁΩÆÂ§±Ë¥•');
        showErrorMessage('ÈÖçÁΩÆÊõ¥Êñ∞Â§±Ë¥•ÔºåËØ∑ÈáçÊñ∞Âä†ËΩΩÊâ©Â±ï');
      }
    }
  });

  context.subscriptions.push(configChangeListener);
  logInfo('ÈÖçÁΩÆÂèòÊõ¥ÁõëÂê¨Âô®Â∑≤Ê≥®ÂÜå');
}

/**
 * Register all detection rules with the rule engine
 * Priority order: API Keys (highest) -> SQL Danger -> Code Injection -> Framework -> Config
 */
async function registerDetectionRules(ruleEngine: IRuleEngine): Promise<void> {
  try {
    logInfo('Ê≠£Âú®Ê≥®ÂÜåÊ£ÄÊµãËßÑÂàô...');
    
    // Register API key detection rules (highest priority - prevents $5000 mistakes)
    logInfo('Ê≥®ÂÜå API ÂØÜÈí•Ê£ÄÊµãËßÑÂàô...');
    registerApiKeyRules(ruleEngine);
    
    // Register SQL danger detection rules (prevents data loss)
    logInfo('Ê≥®ÂÜå SQL Âç±Èô©Êìç‰ΩúÊ£ÄÊµãËßÑÂàô...');
    registerSqlDangerRules(ruleEngine);
    
    // Register code injection detection rules (prevents XSS and command injection)
    logInfo('Ê≥®ÂÜå‰ª£Á†ÅÊ≥®ÂÖ•Ê£ÄÊµãËßÑÂàô...');
    registerCodeInjectionRules(ruleEngine);
    
    // Register framework-specific risk detection rules (prevents framework-specific vulnerabilities)
    logInfo('Ê≥®ÂÜåÊ°ÜÊû∂È£éÈô©Ê£ÄÊµãËßÑÂàô...');
    registerFrameworkRiskRules(ruleEngine);
    
    // Register configuration error detection rules (prevents production misconfigurations)
    logInfo('Ê≥®ÂÜåÈÖçÁΩÆÈîôËØØÊ£ÄÊµãËßÑÂàô...');
    registerConfigErrorRules(ruleEngine);
    
    // Get final statistics
    const stats = ruleEngine.getStatistics();
    logInfo(`ËßÑÂàôÊ≥®ÂÜåÂÆåÊàê - ÊÄªËÆ°: ${stats.totalRules}, Â∑≤ÂêØÁî®: ${stats.enabledRules}`);
    logInfo(`ÊåâÁ±ªÂà´ÂàÜÂ∏É: ${Object.entries(stats.rulesByCategory).map(([cat, count]) => `${cat}: ${count}`).join(', ')}`);
    logInfo(`Êåâ‰∏•ÈáçÁ®ãÂ∫¶ÂàÜÂ∏É: ${Object.entries(stats.rulesBySeverity).map(([sev, count]) => `${sev}: ${count}`).join(', ')}`);
    
  } catch (error) {
    logError(error as Error, 'Ê≥®ÂÜåÊ£ÄÊµãËßÑÂàôÂ§±Ë¥•');
    throw error;
  }
}

/**
 * Verify that all components are properly connected for the real-time analysis workflow
 * 
 * Workflow verification:
 * 1. DocumentMonitor -> AnalysisEngine (for triggering analysis)
 * 2. AnalysisEngine -> RuleEngine (for executing rules)
 * 3. DocumentMonitor -> DiagnosticManager (for updating diagnostics)
 * 4. DiagnosticManager -> VSCode (for displaying issues)
 * 5. QuickFixProvider -> VSCode (for providing fixes)
 */
function verifyComponentIntegration(): void {
  if (!services) {
    throw new Error('ÊúçÂä°Êú™ÂàùÂßãÂåñ');
  }

  // Verify all components are initialized
  const components = [
    { name: 'ÊñáÊ°£ÁõëÊéßÂô®', service: services.documentMonitor },
    { name: 'ÂàÜÊûêÂºïÊìé', service: services.analysisEngine },
    { name: 'ËßÑÂàôÂºïÊìé', service: services.ruleEngine },
    { name: 'ËØäÊñ≠ÁÆ°ÁêÜÂô®', service: services.diagnosticManager },
    { name: 'Âø´ÈÄü‰øÆÂ§çÊèê‰æõËÄÖ', service: services.quickFixProvider }
  ];

  for (const component of components) {
    if (!component.service) {
      throw new Error(`${component.name}Êú™Ê≠£Á°ÆÂàùÂßãÂåñ`);
    }
  }

  // Verify rule engine has rules
  const ruleStats = services.ruleEngine.getStatistics();
  if (ruleStats.enabledRules === 0) {
    throw new Error('ËßÑÂàôÂºïÊìéÊ≤°ÊúâÂêØÁî®ÁöÑËßÑÂàô');
  }

  logInfo('ÊâÄÊúâÁªÑ‰ª∂ÈõÜÊàêÈ™åËØÅÈÄöËøá - ÂÆûÊó∂ÂàÜÊûêÂ∑•‰ΩúÊµÅÁ®ãÂ∑≤Â∞±Áª™');
}

/**
 * Register VSCode providers for complete integration
 * This connects our services to VSCode's UI and user interactions
 */
function registerVSCodeProviders(
  context: vscode.ExtensionContext,
  quickFixProvider: IQuickFixProvider
): void {
  try {
    // Register code action provider for quick fixes across all supported languages
    const supportedLanguages = services?.config.supportedLanguages || ['*'];
    let documentSelector: vscode.DocumentSelector = supportedLanguages
      .filter(lang => lang !== '*')
      .map(lang => ({
        scheme: 'file',
        language: lang
      }));
    
    // Add wildcard selector if '*' is in supported languages
    if (supportedLanguages.includes('*')) {
      documentSelector = [...documentSelector, { scheme: 'file' }];
    }

    const codeActionProvider = vscode.languages.registerCodeActionsProvider(
      documentSelector,
      quickFixProvider,
      {
        providedCodeActionKinds: [
          vscode.CodeActionKind.QuickFix,      // Individual fixes
          vscode.CodeActionKind.Refactor,     // Code refactoring
          vscode.CodeActionKind.SourceFixAll  // Fix all issues
        ]
      }
    );
    
    context.subscriptions.push(codeActionProvider);
    logInfo(`‰ª£Á†ÅÊìç‰ΩúÊèê‰æõËÄÖÂ∑≤Ê≥®ÂÜå - ÊîØÊåÅËØ≠Ë®Ä: ${supportedLanguages.join(', ')}`);
    
    // Register additional providers if needed in the future
    // (e.g., hover provider for security tips, completion provider for secure alternatives)
    
  } catch (error) {
    logError(error as Error, 'Ê≥®ÂÜå VSCode Êèê‰æõËÄÖÂ§±Ë¥•');
    throw error;
  }
}

/**
 * Get current extension services (for use by other modules)
 */
export function getExtensionServices(): ExtensionServices | null {
  return services;
}
